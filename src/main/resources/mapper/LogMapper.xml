<?xml version="1.0" encoding="UTF-8" ?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Read.Domain.Log.LogMapper">


    <select id="LogStatusByUserId" resultType="Read.Domain.Log.LogStatusByUserIdDto">
        SELECT u.book_point as 'virtualBook',COUNT(IF(status = 1,status,null)) as 'holdBook',COUNT(IF(status = 2,status,null)) as 'shareBook',COUNT(IF(status = 3,status,null)) as 'sendBook'
        ,COUNT(IF(status = 4,status,null)) as 'requestBook',COUNT(IF(status = 6,status,null)) as 'receiveBook',COUNT(IF(status = 5,status,null)) as 'planBook'
        from read.Log l join read.User u
        on l.userId= u.userId
        where l.userId=#{id}
    </select>
    <select id ="selectByUserId" resultType="Read.Domain.Log.LogBookDto">
        SELECT b.bookId,b.author,b.translator,b.publisher,b.title,b.category,b.cover_url as coverUrl,b.isbn,b.publication,l.status
        FROM read.Book b join read.Log l
        on b.bookId  = l.bookId
        where l.userId=#{id} and l.status not in(3) ORDER BY l.latest DESC
    </select>
    <select id="selectByUser" resultType="Read.Domain.Log.Log">
        select *
        from read.Log
        where userId = #{id};
    </select>
    <select id="selectByStatusIdAndUserId" resultType="Read.Domain.Log.LogBookDto">
        SELECT b.*,l.status
        FROM read.Book b join read.Log l
        on b.bookId  = l.bookId
        where l.userId=#{userId} and l.status=#{status};
    </select>

    <select id="myBookLog" parameterType="java.lang.Long" resultType="Read.Domain.ResponseDto.MyBookLogResponseDto">
        select b.author,b.bookId,b.cover_url as coverUrl,b.title,b.publisher,b.publication,b.category,l.status,
		  (
			SELECT COUNT(*)
			FROM read.Log a
			where a.bookId =l.bookId
		  ) AS totalCount
	    from read.Book b join read.Log l
	    on b.bookId = l.bookId
	    where l.userId = #{userId}
    </select>

    <select id="selectBySequence" parameterType="java.util.Map" resultType="java.lang.Long">
        SELECT sequence
        FROM read.Log
        WHERE bookId = #{bookId} AND userId = #{userId}
    </select>

    <select id="detailBookLogList" parameterType="java.lang.String" resultType="Read.Domain.Log.LogUser">
        SELECT u.nickName, l.latest, u.profile_url AS profileUrl, u.address
        FROM read.Log l JOIN read.User u
        ON l.userId = u.userId
        WHERE l.bookId = #{bookId}
        ORDER BY l.latest;
    </select>

    <select id = "countByBookId" resultType="java.lang.Long">
        SELECT COUNT(sequence) AS totalCount
        FROM read.Log
        WHERE bookId = #{bookId}
    </select>

    <select id="selectByIsbn" resultType="Read.Domain.Log.Log">
        SELECT l.userId, l.bookId, l.status, l.address, l.latitude, l.longitude, l.latest, l.sequence
        FROM read.Log l JOIN read.Book b
        ON l.bookId = b.bookId
        WHERE b.isbn = #{isbn}
        ORDER BY latest DESC
        LIMIT 1
    </select>

    <update id="updateByRequest" parameterType="Read.Domain.Log.Log">
        UPDATE read.Log
        SET
          status = 5
        WHERE
          bookId = #{bookId}
    </update>

    <insert id="insert">
        INSERT INTO read.Log(userId,bookId,status,address,latitude,longitude,latest,sequence)
        VALUES(#{user.userId},#{bookId},6,#{user.address},#{user.latitude},#{user.longitude},NOW(),#{sequence})
    </insert>
    <update id="changeStatus">
        UPDATE read.Log
        SET
        status=#{changeStatus}
        WHERE bookId=#{bookId} and status=#{presentStatus};
    </update>
    <update id="sendStatus">
        UPDATE read.Log
        SET
        status=3
        where bookId=#{bookId} and status=5;
    </update>
    <update id="receiveStatus">
        UPDATE read.Log
        SET
        status=4
        where bookId=#{bookId} and status=6;
    </update>
    <update id="checkSendStatus">
        UPDATE read.Log
        SET
        status=1
        where bookId=#{bookId} and status=4;
    </update>
    <delete id="deleteStaus">
        DELETE FROM read.Log WHERE bookId=#{bookId} and status=6;
    </delete>
    <update id="requestToShareStatus">
        UPDATE read.Log
        SET
        status=2
        where bookId=#{bookId} and status=5;
    </update>

    <select id="userInformation" resultType="Read.Domain.User.UserCreateDto">
      select u.*
      From read.User u join read.Log l
      on u.userId = l.userId
      where l.bookId = #{bookId} and l.status not in (5);
    </select>
    <select id="pointUp">
        call read.pointup(#{bookId});
    </select>
</mapper>